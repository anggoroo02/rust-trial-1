tipe data di rust ada 2: Scalar and Compund.
Scalar
  integer: merupakan bilangan bulat tanpa koma, terdiri dari 8, 16,32, 64, arch. untuk arch mengikuti sistem operasi, bisa 32bit atau 64bit; tapi kebanyakan komputer modern sudah menggunakan sistem operasi 64bit.
    ada 2 tipe: signed(contoh i32) dan unsigned(contoh u32); signed dapat menampung minus/negatif (-). biasanya jika memasukan nilai integer ke variable tanpa memberitahu tipe data secara implisit maka akan otomatis menggunakan i32.
    Floating point: adalah bilangan dengan koma/desimal, terdiri dari f32 dan f64.
    Boolean: tipe data yang hanya terdiri dari true dan false.
  Character type: merupakan tipe data alfabet; chat terbagi atas 2 yaitu char dan string. Char menggunakan kutip tunggal ('') sedangkan string menggunakan kutip ganda ("").
Compund: Tipe gabungan dapat mengelompokkan beberapa nilai dari tipe lain menjadi satu tipe. Rust memiliki dua tipe gabungan primitif: tuple dan array.
  Tupples: Tuple adalah cara umum untuk mengelompokkan sejumlah nilai lain dengan berbagai tipe menjadi satu tipe gabungan. intinya kayak array.
  Array: kumpulan nilai yang memiliki panjang yang sama, tipe data yang sama, dan diawali dengan indeks yang dimulai dari 0.
Fungsi
secara tidak sadar saya (atau kita) telah menggunakan fungsi, contoh fn main() {}. digunakan untuk mengerjakan suatu pekerjaan tertentu, serta letaknya dipisahkan dari bagian program yang menggunakan fungsi tersebut.
Fungsi dapat di panggil, dengan menggunakan nama_fungsi(). sebelum bisa digunakan, fungsi harus di definisikan dengan kata kunci fn.
contoh : fn say_hello() { println!("Hello, world!"); }.
dan untuk menggunakan fungsi tersebut, kita bisa menulis : fn main() { say_hello(); }.
catatan, fungsi berperan penting dalam Object Orienated Programming (OOP) karena fungsi adalah bagian dari konsep OOP.
Fungsi juga bisa menerima parameter, contoh : fn say_hello(name: &str) { println!("Hello, {}!", name); }.
Fungsi juga bisa mengembalikan nilai, contoh : fn add(a: i32, b: i32) -> i32 { a + b }.
Fungsi juga bisa memiliki default parameter, contoh : fn add(a: i32, b: i32, c: i32 = 0) -> i32 { a + b + c }.
Perbedaan Antara Pernyataan dan Ekspresi
  Pernyataan(statement): Tidak menghasilkan nilai dan sering digunakan untuk mengubah keadaan program (misalnya mendeklarasikan variabel).
  Ekspresi(expression): Menghasilkan nilai dan dapat digunakan di dalam pernyataan.
Kode yang digunakan untuk membatasi cakupan variabel juga merupakan ekspresi, jika tidak diakhiri dengan titik koma.
contoh let y = {
    let x = 3;
      x + 1 // Tidak ada titik koma, ini adalah ekspresi yang menghasilkan nilai 4
    }; (kalo gak pake titik koma, maka jadinya expression) jadi y itu isinya x + 1 tapi x dideklarasikan di dalam y.
pengmbalian fungsi (->): menyatakan tipe pengembalian fungsi. Ini digunakan setelah nama fungsi dan parameter, untuk menunjukkan tipe nilai yang dikembalikan oleh fungsi tersebut.

